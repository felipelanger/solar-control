#include <ESP8266WiFi.h>
#include <EmonLib.h>

// Configurações Wi-Fi
const char* ssid = "Nina_2G";
const char* password = "Internet1003#";

// Instância do monitor
EnergyMonitor emon1;

// Configurações da rede elétrica e pino analógico
int rede = 127.0;   // Tensão da rede
int pino_sct = A0;  // Pino analógico do ESP8266

// Variável para o IP ou hostname do servidor InfluxDB
const char* serverAddress = "raspberrypi.local"; // Endereço do InfluxDB
const int serverPort = 8086;  // Porta padrão do InfluxDB

// Variável para controlar o tempo de envio
unsigned long lastSendTime = 0;  // Armazena o último tempo de envio
const unsigned long sendInterval = 1000; // Intervalo de 1 segundo

void setup() {
  Serial.begin(9600);  // Inicializa comunicação serial
  
  // Conexão Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Conectando-se ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" Conectado!");

  // Exibe o endereço IP capturado
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());

  // Configuração do sensor SCT-013
  emon1.current(pino_sct, 29);  // Pino e calibração
}

void sendData() {
  double Irms = emon1.calcIrms(1480);  // Calcula a corrente RMS instantânea

  // Se a corrente estiver abaixo de um limiar, consideramos como zero
  if (Irms < 0.05) {
    Irms = 0.0;
  }

  double potencia = Irms * rede;  // Calcula a potência

  // Construindo a linha de dados no formato Line Protocol para o InfluxDB
  String lineData = "central_power_sensor_raw ";
  lineData += "corrente=" + String(Irms, 2) + ",";
  lineData += "potencia=" + String(potencia, 2);

  // URL para o banco de dados InfluxDB
  String url = String("/write?db=IOT_DB"); // Substitua "IOT_DB" pelo nome do banco no InfluxDB

  // Envia os dados para o InfluxDB
  WiFiClient client;
  if (client.connect(serverAddress, serverPort)) {
    client.print(String("POST ") + url + " HTTP/1.1\r\n" +
                 "Host: " + serverAddress + "\r\n" +
                 "Connection: close\r\n" +
                 "Content-Type: text/plain\r\n" +
                 "Content-Length:  " + lineData.length() + "\r\n\r\n" +
                 lineData);
    Serial.println("Dados enviados ao InfluxDB.");
  } else {
    Serial.println("Falha na conexão com o InfluxDB.");
  }
  client.stop();  // Fecha a conexão
}

void loop() {
  // Verifica se é hora de enviar os dados
  unsigned long currentMillis = millis();
  if (currentMillis - lastSendTime >= sendInterval) {
    lastSendTime = currentMillis;
    sendData();
  }
}
